var models = require("../models");
models.sequelize.config.logging = false;
var allnames = {};
var alltables = {};
var alldescr = {};
var allrelations = [];
models.sequelize.query("SELECT * FROM information_schema.tables", { type: models.sequelize.QueryTypes.SELECT})
	.map(function(res, index, count) {
    var cname = res["TABLE_NAME"];
    allnames[index] = res["TABLE_NAME"];
    alltables[res["TABLE_NAME"]] = res;
		return models.sequelize.getQueryInterface().describeTable(res["TABLE_NAME"]).then(function(descr, index) {
      // console.log(descr, index);
      alldescr[cname] = descr;
      return cname;
    }).then(function(cname , cb) {
      return models.sequelize.query('SELECT \
        ccu.table_name AS source_table \
        ,ccu.constraint_name AS constraint_name \
        ,ccu.column_name AS source_column \
        ,kcu.table_name AS target_table \
        ,kcu.column_name AS target_column \
      FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu \
      INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc \
          ON ccu.CONSTRAINT_NAME = rc.CONSTRAINT_NAME \
      INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu  \
          ON kcu.CONSTRAINT_NAME = rc.UNIQUE_CONSTRAINT_NAME \
          WHERE ccu.table_name = ? ' , { replacements: [cname], type: models.sequelize.QueryTypes.SELECT} );
    }).then(function(res) {
        for (var i in res)
          allrelations.push(res[i]);
        return res;
    });

  }).then(function(res) {
    // generate the script
    var out = "// auto-generated by dbmodelgenerator.js; run that to re-generate this\n";
    out += "module.exports = function(sequelize) {\n";
    out += "\t var res = {";
    var clines = [];
    for (var ctable in alldescr) {
      var cl = '\n\t"'+ctable+'" : sequelize.define("'+ctable+'",';
      cl += JSON.stringify(alldescr[ctable],0,4);
      cl += ', {tableName : "'+ctable+'",  timestamps: false }';
      cl += ')'
      clines.push(cl);
    }
    out += clines.join(", ");
    out += "};\n"
    var relmatrix = {};
    for (var i in allrelations) {
      var casval = "";
      var cascmd = "";
      // disambiguate N:M relations
      var cas = allrelations[i]["source_table"];
      var cascol = allrelations[i]["source_column"];
      if (relmatrix[cas] === undefined)
        relmatrix[cas] = {};
      if (relmatrix[cas][allrelations[i]["target_table"]] === undefined)
        relmatrix[cas][allrelations[i]["target_table"]] = 1;
      else {
        cascmd = ', as : "'+((cascol.endsWith("ID"))?(cascol.substr(0,cascol.length-2)):(cascol))+'" ';
      }
      out += "res."+allrelations[i]["target_table"]+".hasMany(res."+allrelations[i]["source_table"]+', {foreignKey: "'+allrelations[i]["source_column"]+'" '+cascmd+'} );\n'
      out += "res."+allrelations[i]["source_table"]+".belongsTo(res."+allrelations[i]["target_table"]+', {foreignKey: "'+allrelations[i]["source_column"]+'" '+cascmd+'} );\n'
    }
    out += " return res;\n";
    out += "};";

    console.warn(out);
  });

